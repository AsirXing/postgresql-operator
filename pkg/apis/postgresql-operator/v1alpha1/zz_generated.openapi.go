// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.Backup":           schema_pkg_apis_postgresql_operator_v1alpha1_Backup(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.BackupSpec":       schema_pkg_apis_postgresql_operator_v1alpha1_BackupSpec(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.BackupStatus":     schema_pkg_apis_postgresql_operator_v1alpha1_BackupStatus(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.Postgresql":       schema_pkg_apis_postgresql_operator_v1alpha1_Postgresql(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.PostgresqlSpec":   schema_pkg_apis_postgresql_operator_v1alpha1_PostgresqlSpec(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.PostgresqlStatus": schema_pkg_apis_postgresql_operator_v1alpha1_PostgresqlStatus(ref),
	}
}

func schema_pkg_apis_postgresql_operator_v1alpha1_Backup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Backup is the Schema for the backups API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.BackupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.BackupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.BackupSpec", "github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.BackupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_postgresql_operator_v1alpha1_BackupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackupSpec defines the desired state of Backup",
				Properties: map[string]spec.Schema{
					"postgresqlCRName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the PostgreSQL CR applied which this backup will work with",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedule period for the CronJob  \"0 0 * * *\" # daily at 00:00.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image:tag used to do the backup. More Info: https://github.com/integr8ly/backup-container-image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Database version. (E.g 9.6). IMPORTANT: Just the first 2 digits should be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"productName": {
						SchemaProps: spec.SchemaProps{
							Description: "Used to create the directory where the files will be stored",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsS3BucketName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of AWS S3 storage. Required to create the Secret with the data to allow send the backup files to AWS S3 storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsAccessKeyId": {
						SchemaProps: spec.SchemaProps{
							Description: "Key ID of AWS S3 storage. Required to create the Secret with the data to allow send the backup files to AWS S3 storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretAccessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret/Token of AWS S3 storage. Required to create the Secret with the data to allow send the backup files to AWS S3 storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsCredentialsSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret with the AWS data credentials already created in the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsCredentialsSecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the namespace where the scret with the AWS data credentials is in the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptKeySecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret with the EncryptKey data already created in the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptKeySecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the namespace where the secret with the EncryptKey data is in the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgPublicKey": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG public key to create the EncryptionKeySecret with this data See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgEmail": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG email to create the EncryptionKeySecret with this data See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgTrustModel": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_postgresql_operator_v1alpha1_BackupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackupStatus defines the observed state of Backup",
				Properties: map[string]spec.Schema{
					"backupStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Will be as \"OK when all objects are created successfully",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cronJobName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the CronJob object created and managed by it to schedule the backup job",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dbSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret object created with the database data to allow the backup image connect to the database",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dbSecretData": {
						SchemaProps: spec.SchemaProps{
							Description: "Data  of the secret object created with the database data to allow the backup image connect to the database",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"awsSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name  of the secret object with the Aws data to allow send the backup files to the AWS storage",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretData": {
						SchemaProps: spec.SchemaProps{
							Description: "Data  of the secret object with the Aws data to allow send the backup files to the AWS storage",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"awsCredentialsSecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionKeySecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name  of the secret object with the Encryption GPG Key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionKeySecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the secret object with the Encryption GPG Key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionKeySecretData": {
						SchemaProps: spec.SchemaProps{
							Description: "Data of the secret object with the Encryption GPG Key",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"hasEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when it has an EncryptionKey to be used to send the backup files",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"databasePodFound": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"databaseServiceFound": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cronJobStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the CronJob object",
							Ref:         ref("k8s.io/api/batch/v1beta1.CronJobStatus"),
						},
					},
				},
				Required: []string{"backupStatus", "cronJobName", "dbSecretName", "dbSecretData", "awsSecretName", "awsSecretData", "awsCredentialsSecretNamespace", "encryptionKeySecretName", "encryptionKeySecretNamespace", "encryptionKeySecretData", "hasEncryptionKey", "databasePodFound", "databaseServiceFound", "cronJobStatus"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/batch/v1beta1.CronJobStatus"},
	}
}

func schema_pkg_apis_postgresql_operator_v1alpha1_Postgresql(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Postgresql is the Schema for the postgresqls API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.PostgresqlSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.PostgresqlStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.PostgresqlSpec", "github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql-operator/v1alpha1.PostgresqlStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_postgresql_operator_v1alpha1_PostgresqlSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgresqlSpec defines the desired state of Postgresql",
				Properties: map[string]spec.Schema{
					"databaseName": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (Spec.DatabaseNameParam).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePassword": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (Spec.DatabasePasswordParam).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseUser": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (Spec.DatabaseUser).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseNameParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database mame Note that each database version/image can expected a different value for it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePasswordParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database password Note that each database version/image can expected a different value for it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseUserParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database user Note that each database version/image can expected a different value for it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePort": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable in order to define the port which it should use. It will be used in its container as well",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Quantity of instances",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Database image:tag E.g \"centos/postgresql-96-centos7\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name to create the Database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseMemoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory which will be available for the database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseMemoryRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory Request which will be available for the database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseStorageRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Storage Request which will be available for the database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerImagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy definition to pull the Database Image More info: https://kubernetes.io/docs/concepts/containers/images/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the ConfigMap where the operator should looking for the EnvVars keys and/or values only",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapDatabaseNameParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap key where the operator should looking for the value for the database name for its env var",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapDatabasePasswordParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap key where the operator should looking for the value for the database user for its env var",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapDatabaseUserParam": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap key where the operator should looking for the value for the database password for its env var",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_postgresql_operator_v1alpha1_PostgresqlStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgresqlStatus defines the observed state of Postgresql",
				Properties: map[string]spec.Schema{
					"pvcStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the PersistentVolumeClaim created and managed by it",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimStatus"),
						},
					},
					"deploymentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Database Deployment created and managed by it",
							Ref:         ref("k8s.io/api/apps/v1.DeploymentStatus"),
						},
					},
					"serviceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Database Service created and managed by it",
							Ref:         ref("k8s.io/api/core/v1.ServiceStatus"),
						},
					},
					"databaseStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "It will be as \"OK when all objects are created successfully",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"pvcStatus", "deploymentStatus", "serviceStatus", "databaseStatus"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/apps/v1.DeploymentStatus", "k8s.io/api/core/v1.PersistentVolumeClaimStatus", "k8s.io/api/core/v1.ServiceStatus"},
	}
}
